{
  "name": "Vim",
  "tagline": "My Vim configuration more Python, Javascript, Vue.js, Golang and Markdown, will add Haskell, Ruby and C/C++",
  "body": "# [My Vim setting](http://tao12345666333.github.com/vim)\r\n[![Build Status](https://travis-ci.org/tao12345666333/vim.png)](https://travis-ci.org/tao12345666333/vim)\r\n\r\n## [中文说明](https://github.com/tao12345666333/vim/blob/master/README-zh.md)\r\n\r\n## screenshot\r\n\r\n![screenshot.png](https://raw.githubusercontent.com/tao12345666333/vim/master/screenshot.png)\r\n\r\n## Install\r\n(You need a vim compiled with python support. Check it with `vim --version | grep +python`)\r\n\r\n* **Dependencies**(Debian/Ubuntu platform)\r\n\r\n    `sudo apt-get install python vim exuberant-ctags git`\r\n\r\n    `sudo pip install dbgp vim-debug pep8 flake8 pyflakes isort`\r\n\r\n* **Dependencies**(RedHat/CentOS platform)\r\n\r\n    The CentOS 6.7's default Python is 2.6, it's recommend to install Python2.7.\r\n\r\n    `sudo yum install python vim ctags git`\r\n\r\n    `sudo pip install dbgp vim-debug pep8 flake8 pyflakes isort`\r\n\r\n* **Dependencies**(Mac OS platform)\r\n\r\n    `brew install python vim git`\r\n\r\n    `wget http://tenet.dl.sourceforge.net/project/ctags/ctags/5.8/ctags-5.8.tar.gz && tar -zxvf ctags-5.8.tar.gz && cd ctags-5.8 && ./configure && make && sudo make install`\r\n\r\n    `sudo pip install dbgp vim-debug pep8 flake8 pyflakes isort`\r\n\r\n* **Download vimrc file to user home directory**\r\n\r\n    `wget https://raw.githubusercontent.com/tao12345666333/vim/master/vimrc -O $HOME/.vimrc`\r\n\r\n* **Open Vim**\r\n\r\n    Open vim, it will install plugins automatically. Wait for the installation to finish.\r\n    Or you can run\r\n\r\n    `vim -E -u $HOME/.vimrc +qall`\r\n\r\n* **Enjoy your Vim and costomize it**\r\n\r\n## Features\r\n\r\n### Plugin Manage(Vundle)\r\n\r\nIn this configuration，I use [**Vundle**](https://github.com/VundleVim/Vundle.vim) as plugins manager. Vundle will auto manage the `.vim` directory，all plugins which has benn configured will be download to `~/.vim/bundle/` by default, please keep the `.vim` directory clean before use it. When Vundle install plugins will trigger `git clone` opration，the search opration need `curl` .\r\n\r\n#### Configuration(one part)\r\n\r\n```vim\r\n\" let Vundle manage Vundle\r\nBundle 'gmarik/vundle'\r\n\r\n\" ============================================================================\r\n\" Active plugins\r\n\" You can disable or add new ones here:\r\n\r\n\" Plugins from github repos:\r\n\r\n\" Python and PHP Debugger\r\nBundle 'fisadev/vim-debug.vim'\r\n\" Better file browser\r\nBundle 'scrooloose/nerdtree'\r\n\" Code commenter\r\nBundle 'scrooloose/nerdcommenter'\r\n\" Class/module browser\r\nBundle 'majutsushi/tagbar'\r\n\" Code and files fuzzy finder\r\nBundle 'kien/ctrlp.vim'\r\n\" Extension to ctrlp, for fuzzy command finder\r\nBundle 'fisadev/vim-ctrlp-cmdpalette'\r\n\" Zen coding\r\nBundle 'mattn/emmet-vim'\r\n\" Git integration\r\nBundle 'motemen/git-vim'\r\n\" Tab list panel\r\nBundle 'kien/tabman.vim'\r\n\r\n```\r\n\r\n#### Support opration\r\n\r\n|   command             |    description        |\r\n|-----------------------|:---------------------:|\r\n|  :PluginList          |   list all Plugins    |\r\n|  :PluginInstall(!)    | install/update Plugin |\r\n|  :PluginSearch(!) foo |search Plugin about foo|\r\n|  :PluginClean(!)      |  clean unused Plugins |\r\n|  :PluginUpdate        |      update Plugins   |\r\n\r\n\r\n### Project file browser（NERDTree）\r\n\r\nIn this configuration，I use [**NERDTree**](https://github.com/scrooloose/nerdtree) as file browser. The NERDTree allows you to explore your filesystem and to open files and directory. It also allows you to hide files or set bookmarks etc. In NERDTree window input `?` can get the opration guide. This configuration filters out `.pyc`, `.git`, `.hg`, `.svn` etc.\r\n\r\n#### Configuration\r\n\r\n```vim\r\n\" auto open or close NERDTree\r\nautocmd vimenter * if !argc() | NERDTree | endif\r\nautocmd bufenter * if (winnr(\"$\") == 1 && exists(\"b:NERDTreeType\") && b:NERDTreeType == \"primary\") | q | endif\r\n\r\n\" NERDTree -----------------------------\r\n\r\n\" toggle nerdtree display\r\nmap <F3> :NERDTreeToggle<CR>\r\n\" open nerdtree with the current file selected\r\nnmap ,t :NERDTreeFind<CR>\r\n\" don;t show these file types\r\nlet NERDTreeIgnore = ['\\.pyc$', '\\.pyo$']\r\n```\r\n\r\n#### Support opration\r\n\r\n|  shortcut key         |    description             |\r\n|-----------------------|:--------------------------:|\r\n|      F3               | open/close NERDTree        |\r\n|      ,t               |open NERDTree and select current file|\r\n\r\n\r\n### Syntax checking\r\n\r\nIn this configuration，I use [**Syntastic**](https://github.com/scrooloose/syntastic) plugin for syntax checking. Support `C/C++/Go/Python/Haskell/Ruby/JavaScript` etc. For JavaScript, I use `eslint` as checker, so it can check ES6 and JSX etc. You can see [JSLint, JSHint和ESLint的对比及Vim配置](http://moelove.info/2015/11/28/JSLint-JSHint-ESLint%E5%AF%B9%E6%AF%94%E5%92%8CVim%E9%85%8D%E7%BD%AE/) for more details, when you want to change checker tools, just modify a little setting.\r\n\r\n#### Configuration\r\n\r\n```vim\r\n\" Syntastic ------------------------------\r\n\r\n\" show list of errors and warnings on the current file\r\nnmap <leader>e :Errors<CR>\r\n\" turn to next or previous errors, after open errors list\r\nnmap <leader>n :lnext<CR>\r\nnmap <leader>p :lprevious<CR>\r\n\" check also when just opened the file\r\nlet g:syntastic_check_on_open = 1\r\n\" syntastic checker for javascript.\r\n\" eslint is the only tool support JSX.\r\n\" If you don't need write JSX, you can use jshint.\r\n\" And eslint is slow, but not a hindrance\r\n\" let g:syntastic_javascript_checkers = ['jshint']\r\nlet g:syntastic_javascript_checkers = ['eslint']\r\n\" don't put icons on the sign column (it hides the vcs status icons of signify)\r\nlet g:syntastic_enable_signs = 0\r\n\" custom icons (enable them if you use a patched font, and enable the previous \r\n\" setting)\r\nlet g:syntastic_error_symbol = '✗'\r\nlet g:syntastic_warning_symbol = '⚠'\r\nlet g:syntastic_style_error_symbol = '✗'\r\nlet g:syntastic_style_warning_symbol = '⚠'\r\n```\r\n\r\n#### Features\r\n\r\nWhen you save files, it will check syntax automatically, and display syntax errors.\r\n\r\n#### Support opration\r\n\r\n|   shortcut key        |    description             |\r\n|-----------------------|:--------------------------:|\r\n|       `\\e`            |     list syntax errors     |\r\n|       `\\n`            |     turn to next error     |\r\n|       `\\p`            |     turn to previous error |\r\n",
  "google": "UA-50163692-1",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}